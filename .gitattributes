# Git para manejar los finales de línea (EOL)
#
# https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings
#
# El objetivo es poder trabajar en entornos mixtos de Windows, Linux y MacOS
# y permitir que Git gestione los finales de línea en los archivos.
#
# Una vez que hayas creado o ajustado tu archivo .gitattributes, debes realizar
# una re-normalización de los finales de línea de una vez por todas:
#
# 1. Busca y convierte todos los archivos a LF (Unix) en tu repositorio
#
#   find . -type f -not -path "./.git/*" -exec dos2unix {} \;
#   git commit -a -m 'Conversión a dos2unix'
#
# 2. Asegúrate de que todos los archivos nuevos se guarden con LF (Unix)
#
#   git add .gitattributes
#   git commit -m 'agregando .gitattributes para unificar los finales de línea'
#
# Cuando existe .gitattributes comprometido, se sobrescribe la configuración
# que puedas tener con core.autocrlf en .git/config, de modo que nos aseguramos
# un comportamiento consistente para todos los usuarios.
#
# FYI:
# Colección conveniente de archivos .gitattributes para los lenguajes de
# programación más populares: https://github.com/gitattributes/gitattributes

#################################################################################
# atributo          # Comportamiento                    Comportamiento
# atributo          #   CHECKIN                            CHECKOUT
#################################################################################
# text              # Normalizado a LF                 # Convertido a EOL nativo
# [text] eol=crlf   # Normalizado a LF                 # Convertido a CRLF
# [text] eol=lf     # Normalizado a LF                 # Convertido a LF
# -text o binary    # Sin conversión                   # Sin conversión
# text=auto         # "text" si es texto o de lo contrario, como "binary"
# no especificado   # Se usa lo que diga core.autocrlf  en .git/config
###############################################################################
# core.autocrlf     # Presente en tu archivo .git/config
#   false: igual que binary
#   true:  igual que eol=crlf      Usado en Windows
#   input: igual que eol=lf        Usado en Linux/MacOS

###############################################################################
# Establecer el comportamiento predeterminado para normalizar automáticamente
# los finales de línea. Manejar los finales de línea automáticamente para los
# archivos detectados como texto y dejar sin tocar los archivos detectados
# como binarios. En caso de que la gente no tenga configurado core.autocrlf.
###############################################################################
*        text=auto

###############################################################################
# Los archivos anteriores manejarán todos los archivos NO listados a continuación
#

# Ejemplos:
#
# Declarar explícitamente archivos de texto que siempre deseas normalizar y
# convertir a finales de línea nativos al hacer checkout.
# *.c text
# *.h text
#
# Declarar archivos que siempre tendrán finales de línea CRLF al hacer checkout.
# *.sln text eol=crlf
#
# Git siempre convertirá los finales de línea a LF al hacer checkout. Debes usar
# esto para archivos que deben mantener finales de línea LF, incluso en Windows.
# *.md  text eol=lf
# *.c   text eol=lf
#
# Denotar todos los archivos que son verdaderamente binarios y no deben ser modificados.
# *.png binary
# *.jpg binary

###############################################################################
# Estos archivos son texto y deben ser normalizados (Convertir crlf => lf)
*.gitattributes text
.gitignore      text


# Docker
Dockerfile      text
#
# Enable syntax highlighting for files with `.gitattributes` extensions.
#
*.gitattributes linguist-language=gitattributes
*.gitattributes linguist-detectable=true
*.gitattributes linguist-documentation=false

## C++
*.cs     text diff=csharp
*.java   text diff=java
*.html   text diff=html
*.css    text
*.js     text
*.sql    text

*.csproj text merge=union
*.sln    text merge=union eol=crlf

*.docx   diff=astextplain
*.DOCX   diff=astextplain

# absolute paths are ok, as are globs
/**/postinst* text eol=lf

# paths that don't start with / are treated relative to the .gitattributes folder
relative/path/*.txt text eol=lf

# Sources
*.c     text diff=cpp
*.cc    text diff=cpp
*.cxx   text diff=cpp
*.cpp   text diff=cpp
*.cpi   text diff=cpp
*.c++   text diff=cpp
*.hpp   text diff=cpp
*.h     text diff=cpp
*.h++   text diff=cpp
*.hh    text diff=cpp

# Compiled Object files
*.slo   binary
*.lo    binary
*.o     binary
*.obj   binary

# Precompiled Headers
*.gch   binary
*.pch   binary

# Compiled Dynamic libraries
*.so    binary
*.dylib binary
*.dll   binary

# Compiled Static libraries
*.lai   binary
*.la    binary
*.a     binary
*.lib   binary

# Executables
*.exe   binary
*.out   binary
*.app   binary

# Documents
*.md       text diff=markdown
*.mdx      text diff=markdown
*.tex      text diff=tex
*.adoc     text
*.textile  text
*.mustache text
*.csv      text
*.CSV      text eol=crlf
*.tab      text
*.tsv      text
*.txt      text
*.sql      text

# Graphics
*.png      binary
*.jpg      binary
*.jpeg     binary
*.gif      binary
*.tif      binary
*.tiff     binary
*.ico      binary
# SVG treated as text by default.
*.svg      text
# If you want to treat it as binary,
# use the following line instead.
# *.svg    binary
*.eps      binary

# Scripts
*.bash     text eol=lf
*.fish     text eol=lf
*.ksh      text eol=lf
*.sh       text eol=lf
*.zsh      text eol=lf
# These are explicitly windows files and should use crlf
*.bat      text eol=crlf
*.cmd      text eol=crlf
*.ps1      text eol=crlf

# Configuration files
*.conf     text eol=lf

# Serialisation
*.json     text
*.toml     text
*.xml      text
*.yaml     text
*.yml      text

# Archives
*.7z       binary
*.bz       binary
*.bz2      binary
*.bzip2    binary
*.gz       binary
*.lz       binary
*.lzma     binary
*.rar      binary
*.tar      binary
*.taz      binary
*.tbz      binary
*.tbz2     binary
*.tgz      binary
*.tlz      binary
*.txz      binary
*.xz       binary
*.Z        binary
*.zip      binary
*.zst      binary
*.bin      binary
*.jar      binary
*.test     binary

# Text files where line endings should be preserved
*.patch    -text

# Go
# ============
*.go        text diff=golang

# Python
# ============
*.pxd    text diff=python
*.py     text diff=python
*.py3    text diff=python
*.pyw    text diff=python
*.pyx    text diff=python
*.pyz    text diff=python
*.pyi    text diff=python

# Binary files
# ============
*.db     binary
*.p      binary
*.pkl    binary
*.pickle binary
*.pyc    binary export-ignore
*.pyo    binary export-ignore
*.pyd    binary

# Jupyter notebook
*.ipynb  text eol=lf

# diff behavior for common document formats
# Convert binary document formats to text before diffing them. This feature
# is only available from the command line. Turn it on by uncommenting the
# entries below.
*.bibtex   text diff=bibtex
*.doc      diff=astextplain
*.DOC      diff=astextplain
*.docx     diff=astextplain
*.DOCX     diff=astextplain
*.dot      diff=astextplain
*.DOT      diff=astextplain
*.pdf      diff=astextplain
*.PDF      diff=astextplain
*.rtf      diff=astextplain
*.RTF      diff=astextplain
*.epub     diff=astextplain

